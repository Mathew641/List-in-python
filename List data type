
# Empty list
    #List = []

'''L1 = []
print(type(L1))
print("Length of list L1 is ",len(L1))
L1.append(5)
L1.append(10)
L1.append(15)
L1.append(20)
print(L1)
print("Lenth of list L1 after using append function is",len(L1))
'''
# Ques. Create a list that comprises of numbers from 1 to 1000 ?

#First we create an empty list
L2 = []
# now we have to store no. in L2 that ranges from 1 to 1000
'''for num in range(1,1001):
    L2.append(num)

print(L2)'''

# All the generic function that are applicable on list data type will also be applicable on dict, tupple kind of data types.

# Ques. How to calculate length of list ?
 
'''L3 = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]
print("Length of list L3 is",len(L3))
'''
# len --- len is a generic function which is used to calculate length of list, dict tupple data types.



# Let's see how we can check weather the lists are equal to each other

'''list1 = [10, "Abhishek", 2.5]
list2 = [9, "Ankita", 5.6]
print("Are both list1 and list2 are equal ?", list1 == list2)
'''

'''list3 = [10, "Abhishek", 2.5]
list4 = [10, "Abhishek ", 2.5]
print("Are list3 and list4 are equal ?",list3 == list4)
'''

'''list5 = [10, "Abhishek", 2.5]
list6 = [10, "Abhishek", 2.5]
print("List5 and list6 are equal ? ",list5 == list6)
'''
# So, this way we can compare and check weather lists are equal to each other or not and depending on True or False result we can perform the operation over it as desired.

'''list7 = [10, "Abhishek", 2.5]
list8 = [10, 2.5, "Abhishek"]
print("List7 and list8 are equal ? ",list7 == list8)
'''
# on comparing two list, we get True only when both the list have equal number of elements as well as in the same sequence too.



# LEt's see how we can concatenate two or more no. of lists

'''list9 = [1,2,3]
list10 = [4,5,6]
print(list9 + list10)'''

'''list9 = [1,2,3]
list10 = [4,5,6]
list11 = [7,8,9]
print(list9 + list10 + list11)'''



# Let's see how to access elements of list?

list12 = [5,10,15,20,25,30]

# Ques. print all the element of list?
    #print(list12)
#Another way
for num in list12:
    print(num)

# Ques. print 3rd element of th list12
        # Syntax for accessing any specific element of the list is----  "list name[index]"
print("Third element of the list12 is ",list12[2])

# so for accessing all elements of list without using for loop, we can go following way
'''print(list12[0])
print(list12[1])
print(list12[2])
print(list12[3])
print(list12[4])
print(list12[5])
'''

# Ques. What happen if for the following statement execution ?
'''print(list12[100])''' #---- IndexError: list index out of range 
# as there are only 6 elements present in the list12 existing from index 0 to index 5.


# How to update the value of list index item?
'''list13=[7,"Abhishek",2.5]
print(list13)

list13[1] = "Ankita"
print(list13)'''


# How to print list elements using length
   # use indexing funda

list14 = [1,4,7,8,2,5,6,9,3]  
for index in range(0, len(list14)):
    print(list14[index])


# Ques.. list15 = [1,2,58,"Abhishek",[4,8,12,16],"Ankita"]   so what would be the length of list15 ?

'''list15 = [1,2,58,"Abhishek",[4,8,12,16],"Ankita"]
print("Length of list15 is",len(list15))'''
 # o/p -- Length of list15 is 6.
# Concept --- Everything stored in the list is treated as an individual element.



# Ques.. What is the diffeerrence between append and extend ?
list16 = [20,30,40]
list17 = ["Hi","Hello","Bye"]
'''list16.append(list17)

print("O/p of append is ",list16)
print("Length of list16 after append it is ",len(list16))

#O/p of append is  [20, 30, 40, ['Hi', 'Hello', 'Bye']]
#Length of list16 after append it is  4
'''



list16.extend(list17)
print("O/p of extend is ",list16)
print("Lenth of list16 after extend is ",len(list16))

# O/p of extend is  [20, 30, 40, 'Hi', 'Hello', 'Bye']
# Lenth of list16 after extend is  6


# LIST SLICING -- It will help us to access certain range of elements of list, means if i want to have access group of some specific elements from the list, then I can do that with this concept of list slicing.

list17 = [20,30,40,50,60,80,90]
# Syntax for list slicing ---  list name[start index : ending index] --- and here there is one more argument exist in the parantheses of list slicing and that is about step and that's 1.

# we have following ways to print entire list17
'''print(list17)
print(list17[0:7])
print(list17[:])'''


# whwn we give indexes as arguments during list slicing --  First index is inclusive and second index ending index is always exclusive.

# If we want to print only certain part of list17
'''#print("section of element from oth index to 3rd index: ",list17[0:4])
#print(list17[:4])'''

'''print(list17[:])
print(list17[3:])'''

'''list17 = [20,30,40,50,60,80,90]

# for printing elements from start to till 50
print(list17[:4])

# for printing from 40 to 80
print(list17[2:6])'''


# STEP Functio part ---- 
list17 = [20,30,40,50,60,80,90]
print(list17[:])
# I want to print element from starting but want to take 2step jump. 
print(list17[::2])          # Third value we give as argument in parantheses is for the step.

# Using step concept we can skip some elements in the list while printing some desired section of list.

# Ques. How to print the last element of list17 without knowing the length of list17 ?
# Ans. For that we should be aware of the length of the list.
    #print("last element of the list17 is: ",list17[len(list17)]) # -- IndexError: list index out of range
'''print("Last element of list17 is: ",list17[len(list17)-1])
'''

# Ques. Print last second element of list17 without knowing the length of list17?
'''print("Last second element of list17 is: ",list17[len(list17)-2])'''


# NEGATIVE INDEX --- Negative index start from -1 then keeps on decreasing by 1 and therefore can be use to print list from backward or from last index toward index 0.

# Negative Index -1 --- represent last element of list
# Negative index -2 --- represent seecond last element of list.


list17 = [20,30,40,50,60,80,90]
# We can print last element of list without knowing the length of list using negative index 
'''print("Last element of list using negative index concept :",list17[-1])
print("Last second element of list17 using negative index:",list17[-2])
print("Last third element of list17 using negative index:",list17[-3])
'''

# Negative Index -- It help when we have to traverse the list in the backward direction. 

# Ques. print entire input list in reverse direction 
print(list17[-1:]) # --- [90], this is the output we get and it is because the step parameter in it by default is always 1 that is positive one.
print(list17[-1::-1])

